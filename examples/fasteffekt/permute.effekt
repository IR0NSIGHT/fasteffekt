import mutable/array
import examples/fasteffekt/benchmark

def Permute(innerIterations: Int) = {
    var count = 0;
    var arr = emptyArray(0);

    def swap(i: Int, j: Int) = {
        var swapped: Int = unsafeGet(arr,i);
        put(arr,i,arr.unsafeGet(j));
        put(arr,j, swapped);
    }

    def permute(n: Int): Unit = {
        count = count + 1;
        if (n != 0) {
            val n1 = n - 1;
            permute(n1);
            //FIXME: each only ever counts up.
            var i = n1;
            while(i >= 0){
                swap(n1, i);
                permute(n1);
                swap(n1, i);
                i = i - 1;
            }
        }
    }

    def benchmark(): Int = {
        count = 0;
        arr = emptyArray[Int](6);

        each(0,arr.size()){ i =>
            put(arr,i, 1);  
        }
        permute(6);
        return count;
    }

    def verifyResult(result: Int): Boolean = {
        return result == 8660;
    }

    return innerBenchmarkLoop(innerIterations){benchmark}{verifyResult}
}

def main() = {
    val start: Int = currentTimeNanos();
    Permute(1000);
    val end: Int = currentTimeNanos();
    val durInt = end-start;
    val duration = toDouble(durInt)/1000000.0;  //TODO how to write 10d ?
    println("took:");
    println(duration);
    println("seconds");
}