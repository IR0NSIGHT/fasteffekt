import mutable/array
import src/benchmark

record TowersDisk (
  stackSize: Int,
  next: Option[TowersDisk]
)

def printPiles(piles: Array[Option[TowersDisk]]) = {
  println("[");
  each(0, piles.size()){ i =>
    println("  " ++ show(piles.unsafeGet(i)))
  }
  println("]")
}

def Towers() = {
  var piles: Array[Option[TowersDisk]] = emptyArray();
  var movesDone: Int = 0;

  def pushDisk(piles: Array[Option[TowersDisk]], disk: Option[TowersDisk], pile: Int): Option[TowersDisk] = {
    val top: Option[TowersDisk] = piles.unsafeGet(pile);
    (disk, top) match {
      case (Some(diskD), Some(topD)) => 
        if (diskD.stackSize >= topD.stackSize ) {
          panic("Cannot put a big disk on a smaller one");
        }
    }

    val replacer = disk match {
      case Some(aDisk) => 
        Some(TowersDisk(aDisk.stackSize, top))
      case None() => None()
    }
    put(piles,pile, replacer);
    return top 
  }

  def popDiskFrom(pile: Int): Option[TowersDisk] = {
    val top = piles.unsafeGet(pile);
    top match {
      case None() => panic("Attempting to remove a disk from an empty pile");
      case Some(disk) => return Some(disk)
    }

    // this.piles[pile] = top.next;
    // top.next = null;
  }

  def moveTopDisk(fromPile: Int, toPile: Int) = {
    pushDisk(piles, popDiskFrom(fromPile), toPile);
    movesDone = movesDone + 1;
  }

  def buildTowerAt(pile: Int, disks: Int) = {
    var i = disks;
    while (i >= 0) {
      pushDisk(piles, Some(TowersDisk(i,None())), pile);
      i = i -1;
    }
  }

  def moveDisks(disks: Int, fromPile: Int, toPile: Int): Unit = {
    if (disks == 1) {
      moveTopDisk(fromPile, toPile);
    } else {
      val otherPile = (3 - fromPile) - toPile;
      moveDisks(disks - 1, fromPile, otherPile);
      moveTopDisk(fromPile, toPile);
      moveDisks(disks - 1, otherPile, toPile);
    }
  }

  def benchmark(): Int = {
    piles = emptyArray(3)
    put(piles,0,None())
    put(piles,1,None())
    put(piles,2,None())

    buildTowerAt(0, 13);

    movesDone = 0;
    moveDisks(13, 0, 1);
    return movesDone;
  }

  def verifyResult(result: Int): Boolean = {
    return result == 8191;
  }

  //innerBenchmarkLoop(1){benchmark}{verifyResult}
  piles = emptyArray(3)
  put(piles,0,None())
  put(piles,1,None())
  put(piles,2,None())

  buildTowerAt(0, 13);

  
  printPiles(piles)
}



def main() = {
  Towers()
}