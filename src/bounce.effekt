// class Ball {
//   constructor(random) {
//     this.x = random.next() % 500;
//     this.y = random.next() % 500;
//     this.xVel = (random.next() % 300) - 150;
//     this.yVel = (random.next() % 300) - 150;
//   }
record Ball(
    x: Double,
    y: Double,
    xVel: Double,
    yVel: Double
)

def abs(n: Double): Double = if (n < 0.0) 0.0 - n else n

//   bounce() {
//     const xLimit = 500;
//     const yLimit = 500;
//     let bounced = false;

//     this.x += this.xVel;
//     this.y += this.yVel;

//     if (this.x > xLimit) {
//       this.x = xLimit; this.xVel = 0 - Math.abs(this.xVel); bounced = true;
//     }

//     if (this.x < 0) {
//       this.x = 0; this.xVel = Math.abs(this.xVel); bounced = true;
//     }

//     if (this.y > yLimit) {
//       this.y = yLimit; this.yVel = 0 - Math.abs(this.yVel); bounced = true;
//     }

//     if (this.y < 0) {
//       this.y = 0; this.yVel = Math.abs(this.yVel); bounced = true;
//     }

//     return bounced;
//   }
// }
def bounce(ball: Ball): Tuple2[Ball, Boolean] = {
    val xLimit = 500.0;
    val yLimit = 500.0;
    var bounced = false;
    var x = ball.x + ball.xVel;
    var y = ball.y + ball.yVel;
    var xVel = ball.xVel;
    var yVel = ball.yVel;

    if (x > xLimit) {
        x = xLimit; 
        xVel = 0.0 - abs(xVel);
        bounced = true;
    }
    if (x < 0.0) {
        x = 0.0;
        xVel = abs(xVel)
        bounced = true;
    }
    if (y > yLimit) {
        y = yLimit;
        yVel = 0.0 - abs(yVel);
        bounced = true;
    }
    if (y < 0.0) {
        y = 0.0;
        yVel = abs(yVel);
        bounced = true;
    }
    (Ball(x,y, xVel, yVel), bounced)
}

def bitAnd(x: Int, y: Int) = mod(x,(y+1)) 

def Random() = {
    var seed = 74755;
    def next(): Int = {
        seed = bitAnd((seed * 1309) + 13849, 65535);
        seed;
    }
    ();
}

// class Random {
//   constructor() {
//     this.seed = 74755;
//   }

//   next() {
//     this.seed = ((this.seed * 1309) + 13849) & 65535;
//     return this.seed;
//   }
// }

def verifyResult(result: Int) =
    result == 1331
   
// def benchmark(): Int = {
//     val random = new som.Random();
//     const ballCount = 100;
//     let bounces = 0;
//     const balls = new Array(ballCount);
//     let i = 0;

//     for (i = 0; i < ballCount; i += 1) {
//       balls[i] = new Ball(random);
//     }

//     for (i = 0; i < 50; i += 1) {
//       for (const ball of balls) {
//         if (ball.bounce()) {
//           bounces += 1;
//         }
//       }
//     }
//     return bounces;
//   }



